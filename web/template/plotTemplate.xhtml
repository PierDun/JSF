<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">
<f:view>
    <ui:composition>
        <h:form style="display: none">
            <p:remoteCommand update="res-table" name="sendDot" actionListener="#{controller.plotCheckArea}"/>
        </h:form>

        <div class="plot">
            <svg version="1.1"
                 baseProfile="full"
                 width="300" height="300"
                 xmlns="http://www.w3.org/2000/svg"
                 id="svg-plot"
                 onclick="getDotCoor()">
                <line x1="0" y1="150" x2="300" y2="150" stroke-width="1" stroke="#000720"/>
                <line x1="150" y1="0" x2="150" y2="300" stroke-width="1" stroke="#000720"/>
                <!-- стрелочки -->
                <line x1="300" y1="150" x2="296" y2="146" stroke-width="1" stroke="#000720"/>
                <line x1="300" y1="150" x2="296" y2="154" stroke-width="1" stroke="#000720"/>
                <line x1="150" y1="0" x2="146" y2="4" stroke-width="1" stroke="#000720"/>
                <line x1="150" y1="0" x2="154" y2="4" stroke-width="1" stroke="#000720"/>
                <!-- разметка размера -->
                <line x1="270" y1="148" x2="270" y2="152" stroke="#000720"/>
                <text x="265" y="140">R</text>
                <line x1="210" y1="148" x2="210" y2="152" stroke="#000720"/>
                <text x="200" y="140">R/2</text>
                <line x1="90" y1="148" x2="90" y2="152" stroke="#000720"/>
                <text x="75" y="140">-R/2</text>
                <line x1="30" y1="148" x2="30" y2="152" stroke="#000720"/>
                <text x="20" y="140">-R</text>
                <line x1="148" y1="30" x2="152" y2="30" stroke="#000720"/>
                <text x="156" y="35">R</text>
                <line x1="148" y1="90" x2="152" y2="90" stroke="#000720"/>
                <text x="156" y="95">R/2</text>
                <line x1="148" y1="210" x2="152" y2="210" stroke="#000720"/>
                <text x="156" y="215">-R/2</text>
                <line x1="148" y1="270" x2="152" y2="270" stroke="#000720"/>
                <text x="156" y="275">-R</text>
                <!-- фигуры в центре -->
                <rect x="150" y="150" width="60" height="120" fill="#75A9D5" fill-opacity="0.4" stroke="#986E6E"/>
                <polygon points="150,150 150,210 90,150" fill="#75A9D5" fill-opacity="0.4" stroke="#986E6E"/>
                <path d="M150 150
                         L 150 30
                         A 120 120, 0, 0, 0, 30 150 Z" fill="#75A9D5" fill-opacity="0.4" stroke="#986E6E"/>"
                <h:outputText escape="false" value="#{db.resultAllDot}"/>
            </svg>
        </div>

        <script type="text/javascript">
            function getDotCoor() {
                const plot_container = document.getElementById("svg-plot");
                let rect = plot_container.getBoundingClientRect();
                let y_dot = (event.clientY - rect.top);
                let x_dot = (event.clientX - rect.left);
                let y = (150 - y_dot);
                let x = (-150 + x_dot);

                let isDotAllowed = validR();
                if (isDotAllowed) {
                    let r = getR();
                    y = y / 120 * r;
                    x = x / 120 * r;
                    let dot = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    dot.setAttribute("r", "3");
                    dot.setAttribute("cx", Math.round(x_dot));
                    dot.setAttribute("cy", Math.round(y_dot));
                    document.getElementById("svg-plot").appendChild(dot);
                    if (!check(x, y, r)) {
                        dot.setAttribute("stroke", "red");
                        dot.setAttribute("fill", "red");
                    } else {
                        dot.setAttribute("stroke", "green");
                        dot.setAttribute("fill", "green");
                    }
                    dot.setAttribute("class", r);
                    sendDot([{name: 'x', value: x}, {name: 'y', value: y}, {name: 'r', value: r}]);
                }
            }

            function changeDotPos() {
                if (validR()) {
                    let dotsList = document.querySelectorAll("circle");
                    dotsList.forEach(function (dot) {
                        let x_dot_prev = parseInt(dot.getAttribute("cx"));
                        let y_dot_prev = dot.getAttribute("cy");
                        let r_prev = dot.getAttribute("class");
                        let y = (150 - y_dot_prev);
                        let x = (-150 + x_dot_prev);
                        y = y * r_prev;
                        x = x * r_prev;
                        let r_cur = getR();
                        y = y / r_cur;
                        x = x / r_cur;
                        let x_dot_cur = x + 150;
                        let y_dot_cur = 150 - y;
                        if (!check((-150 + x_dot_cur) / 120 * r_cur, (150 - y_dot_cur) / 120 * r_cur, r_cur)) {
                            dot.setAttribute("stroke", "red");
                            dot.setAttribute("fill", "red");
                        } else {
                            dot.setAttribute("stroke", "green");
                            dot.setAttribute("fill", "green");
                        }
                        dot.setAttribute("cx", Math.round(x_dot_cur));
                        dot.setAttribute("cy", Math.round(y_dot_cur));
                        dot.setAttribute("class", r_cur);
                    })
                }
            }

            function check(x, y, r) {
                return checkCircle(x, y, r) || checkRectangle(x, y, r) || checkTriangle(x, y, r);
            }

            function checkRectangle(x, y, r) {
                return (x &lt;= 0.5 * r) &amp;&amp; (x >= 0) &amp;&amp; (y >= -r) &amp;&amp; (y &lt;= 0);
            }

            function checkCircle(x, y, r) {
                return (x * x + y * y &lt;= r * r) &amp;&amp; (x &lt;= 0) &amp;&amp; (y >= 0);
            }

            function checkTriangle(x, y, r) {
                return (-x - r * 0.5 &lt;= y) &amp;&amp; (x &lt;= 0) &amp;&amp; (y &lt;= 0);
            }

            function validR() {
                let element = document.getElementById("j_idt11:r");
                const errmsg = document.getElementById("error-message-R");
                let r = element.value.replace(/,/, '.');
                let isValid = isNumber(r);
                isValid = isValid &amp;&amp; (r &lt;= 4) &amp;&amp; (r >= 1);

                if (!isValid) {
                    element.style.borderColor = "red";
                } else {
                    element.style.borderColor = "green";
                }

                if (!isValid) {
                    errmsg.textContent = "Incorrect R";
                } else {
                    errmsg.textContent = " ";
                }

                return isValid;
            }

            function getR() {
                return document.getElementById("j_idt11:r").value;
            }
        </script>
    </ui:composition>
</f:view>
</html>
